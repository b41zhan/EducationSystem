let currentBio = '';
let isEditingBio = false;
let userRole = '';

document.addEventListener('DOMContentLoaded', function() {
    loadProfile();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
    document.getElementById('avatar-upload').addEventListener('change', function(e) {
        if (e.target.files.length > 0) {
            uploadAvatar(e.target.files[0]);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    document.getElementById('back-to-dashboard').addEventListener('click', function(e) {
        e.preventDefault();
        goBackToDashboard();
    });
});

async function loadProfile() {
    try {
        const profileData = await ApiService.get('/profile');
        displayProfile(profileData);

        document.getElementById('loading').style.display = 'none';
        document.getElementById('profile-content').style.display = 'grid';

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        document.getElementById('loading').innerHTML = `
                    <div class="error-message">
                        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}
                        <button onclick="loadProfile()" style="margin-left: 10px;">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                    </div>
                `;
    }
}

function displayProfile(profileData) {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:', profileData);

    document.getElementById('user-name').textContent =
        `${profileData.firstName} ${profileData.lastName}`;
    document.getElementById('user-email').textContent = profileData.email;

    const initials = getInitials(profileData.firstName, profileData.lastName);
    document.getElementById('user-initials').textContent = initials;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ—ë
    userRole = determineUserRole(profileData);
    displayUserRole(userRole);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    updateBackLink(userRole);

    const avatarPlaceholder = document.getElementById('avatar-placeholder');
    const avatarImage = document.getElementById('avatar-image');
    const removeBtn = document.getElementById('remove-avatar-btn');

    if (profileData.profilePhotoPath) {
        console.log('üñº Profile photo path –∏–∑ API:', profileData.profilePhotoPath);

        const avatarUrl = `/uploads/${profileData.profilePhotoPath}?t=${new Date().getTime()}`;
        console.log('üîó Avatar URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', avatarUrl);

        avatarPlaceholder.style.display = 'none';
        avatarImage.style.display = 'block';
        avatarImage.src = avatarUrl;
        removeBtn.style.display = 'block';

        avatarImage.onload = function() {
            console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            console.log('üìè –†–∞–∑–º–µ—Ä—ã:', this.naturalWidth + 'x' + this.naturalHeight);
        };

        avatarImage.onerror = function() {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ URL:', avatarUrl);
            console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder');

            avatarPlaceholder.style.display = 'flex';
            avatarImage.style.display = 'none';
            removeBtn.style.display = 'none';
        };
    } else {
        console.log('‚ÑπÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        avatarPlaceholder.style.display = 'flex';
        avatarImage.style.display = 'none';
        removeBtn.style.display = 'none';
    }

    currentBio = profileData.bio || '';
    displayBio(currentBio);
}

function determineUserRole(profileData) {
    // –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    if (profileData.role) {
        return profileData.role; // –ï—Å–ª–∏ —Ä–æ–ª—å —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –≤ API
    }

    // –°–ø–æ—Å–æ–± 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
    if (profileData.email && profileData.email.includes('teacher')) {
        return 'teacher';
    }

    // –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–π
    if (profileData.teacherClasses && profileData.teacherClasses.length > 0) {
        return 'teacher';
    }

    // –°–ø–æ—Å–æ–± 4: –î–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    return detectUserRoleFromAPI();
}

async function detectUserRoleFromAPI() {
    try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∏—Ç–µ–ª—è
        await ApiService.get('/teacher/assignments/my');
        return 'teacher';
    } catch (error) {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - –∑–Ω–∞—á–∏—Ç —Å—Ç—É–¥–µ–Ω—Ç
        return 'student';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function displayUserRole(role) {
    const roleElement = document.getElementById('user-role');
    if (roleElement) {
        const roleNames = {
            'teacher': 'üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å',
            'student': 'üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç',
            'admin': 'üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        };

        roleElement.textContent = roleNames[role] || role;
        roleElement.style.display = 'block';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ "–ù–∞–∑–∞–¥"
function updateBackLink(role) {
    const backLink = document.getElementById('back-to-dashboard');

    const dashboardLinks = {
        'teacher': '/teacher-dashboard.html',
        'student': '/student-dashboard.html',
        'admin': '/admin.html'
    };

    const targetPage = dashboardLinks[role] || '/student-dashboard.html';
    backLink.href = targetPage;

    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const dashboardNames = {
        'teacher': '–ü–∞–Ω–µ–ª—å —É—á–∏—Ç–µ–ª—è',
        'student': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'admin': '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    };

    backLink.textContent = `‚Üê –ù–∞–∑–∞–¥ –≤ ${dashboardNames[role] || '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é dashboard —Å—Ç—Ä–∞–Ω–∏—Ü—É
function goBackToDashboard() {
    const dashboardLinks = {
        'teacher': '/teacher-dashboard.html',
        'student': '/student-dashboard.html',
        'admin': '/admin.html'
    };

    const targetPage = dashboardLinks[userRole] || '/student-dashboard.html';
    window.location.href = targetPage;
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function checkUserRoleOnLoad() {
    try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∏—Ç–µ–ª—è
        const teacherData = await ApiService.get('/teacher/assignments/my');
        userRole = 'teacher';
    } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ —É—á–∏—Ç–µ–ª—å, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        try {
            const studentData = await ApiService.get('/student/assignments');
            userRole = 'student';
        } catch (error2) {
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            userRole = 'student';
        }
    }

    updateBackLink(userRole);
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function getInitials(firstName, lastName) {
    const first = firstName ? firstName[0].toUpperCase() : '';
    const last = lastName ? lastName[0].toUpperCase() : '';
    return first + last;
}

function displayBio(bio) {
    const bioDisplay = document.getElementById('bio-display');
    const bioEmpty = document.getElementById('bio-empty');
    const bioContent = document.getElementById('bio-content');
    const editBtn = document.getElementById('edit-bio-btn');

    if (bio && bio.trim() !== '') {
        bioEmpty.style.display = 'none';
        bioContent.style.display = 'block';
        bioContent.textContent = bio;
        editBtn.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
    } else {
        bioEmpty.style.display = 'block';
        bioContent.style.display = 'none';
        editBtn.textContent = '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ';
    }
}

function editBio() {
    isEditingBio = true;

    document.getElementById('bio-display').style.display = 'none';
    document.getElementById('bio-edit').style.display = 'block';
    document.getElementById('edit-bio-btn').style.display = 'none';

    document.getElementById('bio-textarea').value = currentBio;
    document.getElementById('bio-textarea').focus();
}

function cancelEditBio() {
    isEditingBio = false;

    document.getElementById('bio-display').style.display = 'block';
    document.getElementById('bio-edit').style.display = 'none';
    document.getElementById('edit-bio-btn').style.display = 'block';
}

async function saveBio() {
    const newBio = document.getElementById('bio-textarea').value.trim();

    try {
        await ApiService.put('/profile/bio', { bio: newBio });

        currentBio = newBio;
        displayBio(currentBio);
        cancelEditBio();

        showMessage('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showMessage(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
    }
}

async function uploadAvatar(file) {
    if (!file) return;

    if (!file.type.startsWith('image/')) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
        return;
    }

    if (file.size > 5 * 1024 * 1024) {
        showMessage('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
        return;
    }

    try {
        const formData = new FormData();
        formData.append('file', file);

        console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏...', file.name);

        const response = await fetch('/api/profile/avatar', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: formData
        });

        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
            throw new Error(errorText || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        }

        const result = await response.json();
        console.log('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

        if (!result.filePath) {
            console.error('–í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç filePath');
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
        }
        showMessage('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');

        await loadProfile();

        document.getElementById('avatar-upload').value = '';

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        showMessage(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
    }
}

async function removeAvatar() {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É?')) return;

    try {
        await ApiService.delete('/profile/avatar');

        showMessage('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');

        document.getElementById('avatar-placeholder').style.display = 'flex';
        document.getElementById('avatar-image').style.display = 'none';
        document.getElementById('remove-avatar-btn').style.display = 'none';

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        showMessage(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`, 'error');
    }
}

function showMessage(message, type) {
    const container = document.getElementById('message-container');
    const messageDiv = document.createElement('div');
    messageDiv.className = type === 'error' ? 'error-message' : 'success-message';
    messageDiv.textContent = message;

    container.appendChild(messageDiv);

    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.parentNode.removeChild(messageDiv);
        }
    }, 5000);
}

function logout() {
    localStorage.removeItem('token');
    window.location.href = '/login.html';
}